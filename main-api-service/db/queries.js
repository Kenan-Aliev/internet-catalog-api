const db = require('./index')

module.exports = async function () {
    await db.query(`CREATE TABLE IF NOT EXISTS "users"  
    (user_id INTEGER NOT NULL generated by default as identity, 
    email VARCHAR(40) NOT NULL unique, 
    password VARCHAR(100) NOT NULL, 
    PRIMARY KEY(user_id))`)

    await db.query(`CREATE TABLE IF NOT EXISTS "categories"
    (category_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
     category_name varchar(30) not null unique,
     products_count INTEGER NOT NULL DEFAULT 0,
     PRIMARY KEY(category_id))`)

    await db.query(`CREATE TABLE IF NOT EXISTS "products"
    (product_id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY,
     product_name VARCHAR(30) NOT NULL unique,
     category_id INTEGER NOT NULL,
     PRIMARY KEY(product_id),
     FOREIGN KEY(category_id) REFERENCES categories(category_id))`)

    await db.query(`CREATE TABLE IF NOT EXISTS "user_product_favorite"
                      (id INTEGER NOT NULL generated by DEFAULT AS IDENTITY,
                       user_id INTEGER NOT NULL,
                       product_id INTEGER NOT NULL,
                       PRIMARY KEY(id),
                       FOREIGN KEY(user_id) REFERENCES users(user_id),
                       FOREIGN KEY(product_id) REFERENCES products(product_id))`)





    await db.query(`
    CREATE OR REPLACE FUNCTION update_products_count()
         RETURNS TRIGGER AS
       $$
       BEGIN
              UPDATE categories
              SET products_count = products_count + 1
              where category_id = new.category_id;
           RETURN NEW;
       END;
       $$
       LANGUAGE 'plpgsql'`)

    await db.query(`
    CREATE OR REPLACE FUNCTION update_products_count2()
         RETURNS TRIGGER AS
       $$
       BEGIN
              UPDATE categories
              SET products_count = products_count - 1
              where category_id = old.category_id;
           RETURN new;
       END;
       $$
       LANGUAGE 'plpgsql'`)

    await db.query(`DROP TRIGGER IF EXISTS update_trigger
                                       ON products;
    CREATE TRIGGER  update_trigger
    after INSERT
    ON products
    FOR EACH ROW
    EXECUTE PROCEDURE update_products_count()`)

    await db.query(`DROP TRIGGER IF EXISTS update_trigger2
                                       ON products;
    CREATE TRIGGER  update_trigger2
    after DELETE
    ON products
    FOR EACH ROW
    EXECUTE PROCEDURE update_products_count2()`)


    await db.query(`CREATE TABLE IF NOT EXISTS "sessions"
         (id INTEGER NOT NULL PRIMARY KEY generated by default as identity,
         sessionId VARCHAR(50) NOT NULL,
         user_id INTEGER NOT NULL,
         FOREIGN KEY(user_id) REFERENCES users(user_id))`)
}